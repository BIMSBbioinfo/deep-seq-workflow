#!/usr/bin/env ruby

require 'rubygems'
require 'bundler/setup'
require 'commander'
require_relative 'lib/workflow'

class DSW
  include Commander::Methods

  def run
    program :name, 'dsw'
    program :version, '0.1.0'
    program :description, 'Deep Seq experiments post-processing workflow'

    command :forbid do |c|
      c.syntax = 'dsw forbid [options]'
      c.summary = ''
      c.description = 'Revokes all permission to all the completed runs or the specified rundir'
      #c.example 'description', 'command example'
      c.option '--rundir DIR', String, 'acts only on the specified absolute path'
      c.action do |args, options|

        options.default rundir: nil

        if options.rundir.nil?
          Workflow.start(:forbid)
        else
          Sequencer.new(options.rundir).forbid!
        end

      end
    end

    command :archive do |c|
      c.syntax = 'dsw archive [options]'
      c.summary = ''
      c.description = 'Calls the initial step of the workflow.'
      #c.example 'description', 'command example'
      c.option '--rundir DIR', String, 'acts only on the specified directory'
      c.action do |args, options|

        options.default rundir: nil

        if options.rundir.nil?
          Workflow.start(:archive)
        else
          Sequencer.new(options.rundir).run_from(:archive)
        end

      end
    end

    command :duplicity do |c|
      c.syntax = 'dsw duplicity [options]'
      c.summary = ''
      c.description = 'Calls the duplicity backup subroutine, attempting to add another incremental backup.'
      c.option '--rundir DIR', String, 'acts only on the specified directory'
      c.option '--singlestep', 'if specified does not progress with the workflow but just makes the remote backup instead'
      c.action do |args, options|

        options.default rundir: nil

        if options.rundir.nil?
          Workflow.start(:duplicity)
        else
          if options.singlestep
            Sequencer.new(options.rundir).run_from(:duplicity, {single_step: true})
          else
            Sequencer.new(options.rundir).run_from(:duplicity)
          end
        end

      end
    end

    command :filter_data do |c|
      c.syntax = 'dsw filter_data [options]'
      c.summary = ''
      c.description = ''
      c.option '--rundir DIR', String, 'acts only on the specified directory'
      c.action do |args, options|

        options.default rundir: nil

        if options.rundir.nil?
          Workflow.start(:filter_data)
        else
          Sequencer.new(options.rundir).run_from(:filter_data)
        end

      end
    end

    command :demultiplex do |c|
      c.syntax = 'dsw demultiplex [options]'
      c.summary = ''
      c.description = 'Calls the demultiplexing subroutine (bcl2fastq).'
      c.option '--rundir DIR', String, 'acts only on the specified directory'
      c.action do |args, options|

        options.default rundir: nil

        if options.rundir.nil?
          Workflow.start(:demultiplex)
        else
          Sequencer.new(options.rundir).run_from(:demultiplex)
        end

      end
    end

  run!
  end
end

DSW.new.run if $0 == __FILE__
